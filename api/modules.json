[
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/Context.lua",
    "filename": "api/Context",
    "moduleName": "api.Context",
    "tags": {
      "moduleDocs": [
        "MODULE DOC\n\n@see framework.EventProtocol"
      ],
      "moduleTags": [
        {
          "name": "see",
          "value": "framework.EventProtocol"
        }
      ],
      "functions": [
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Context:ctor",
          "type": 0,
          "params": ""
        },
        {
          "description": "Get value from context. if key not exists, return default value.",
          "tags": [
            {
              "name": "param",
              "value": "string key"
            },
            {
              "name": "param",
              "value": "mixed defaultValue"
            },
            {
              "name": "return",
              "value": "mixed"
            }
          ],
          "doc": "Get value from context. if key not exists, return default value.\n\n**Example:**\n\n    local level = context:get(\"MIN_LEVEL\", 1)\n\n\n\n### Parameters\n\n-   string **key**\n-   mixed **defaultValue**\n\n\n### Returns\n\n-   mixed",
          "name": "Context:get",
          "type": 0,
          "params": "key, defaultValue"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Context:set",
          "type": 0,
          "params": "key, value"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/EventProtocol.lua",
    "filename": "api/EventProtocol",
    "moduleName": "api.EventProtocol",
    "tags": {
      "moduleDocs": [
        "Events are the principal way in which you create interactive applications. They are a way of\ntriggering responses in your program. For example, you can turn any display object into an\ninteractive object."
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "Turn any object into an interactive object.",
          "tags": [],
          "doc": "Turn any object into an interactive object.\n\n**Usage:**\n\n    framework.api.EventProtocol.extend(object)",
          "name": "EventProtocol.extend",
          "type": 0,
          "params": "object"
        },
        {
          "description": "Adds a listener to the object’s list of listeners, and return handle of listener. When the named event occurs, the listener will be invoked and be supplied with a table representing the event.",
          "tags": [
            {
              "name": "param",
              "value": "eventName"
            },
            {
              "name": "tparam",
              "value": "function listener"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Adds a listener to the object’s list of listeners, and return handle of listener. When the named event occurs, the listener will be invoked and be supplied with a table representing the event.\n\n**Usage:**\n\n    -- Create an object that listens to events\n    local player = Player.new()\n    framework.api.EventProtocol.extend(player)\n\n    -- Setup listener\n    local handle\n    local function onPlayerDead(event)\n        -- event.name   == \"PLAYER_DEAD\"\n        -- event.object == player\n        player:removeEventListener(\"PLAYER_DEAD\", handle)\n    end\n    handle = player:addEventListener(\"PLAYER_DEAD\", onPlayerDead)\n\n    -- Sometime later, create an event and dispatch it\n    player:dispatchEvent({name = \"PLAYER_DEAD\"})\n\n~~\n\n\n### Parameters\n\n-   eventName\nString specifying the name of the event to listen for.\n\n@tparam function listener\nIf the event's event.name matches this string, listener will be invoked.\n\n\n### Returns\n\n-   Nothing.",
          "name": "object:addEventListener",
          "type": 0,
          "params": "eventName, listener"
        },
        {
          "description": "Dispatches event to object. The event parameter must be a table with a name property which is a string identifying the type of event. Event include a object property to the event so that your listener can know which object",
          "tags": [
            {
              "name": "param",
              "value": "event"
            }
          ],
          "doc": "Dispatches event to object. The event parameter must be a table with a name property which is a string identifying the type of event. Event include a object property to the event so that your listener can know which object\nreceived the event.\n\n**Syntax:**\n\n    object:dispatchEvent(event)\n\n<br />\n\n\n### Parameters\n\n-   event\ncontains event properties",
          "name": "object:dispatchEvent",
          "type": 0,
          "params": "event"
        },
        {
          "description": "Removes the specified listener (or by handle) from the object's list of listeners so that it no longer is notified of events corresponding to the specified event.",
          "tags": [],
          "doc": "Removes the specified listener (or by handle) from the object's list of listeners so that it no longer is notified of events corresponding to the specified event.\n\n**Syntax:**\n\n    -- key is listener function or handle return by addEventListener()\n    object:removeEventListener(eventName, key)",
          "name": "object:removeEventListener",
          "type": 0,
          "params": "eventName, key"
        },
        {
          "description": "Removes all listeners for specified event from the object's list of listeners.",
          "tags": [],
          "doc": "Removes all listeners for specified event from the object's list of listeners.\n\n**Syntax:**\n\n    object:removeAllEventListenersForEvent(eventName)",
          "name": "object:removeAllEventListenersForEvent",
          "type": 0,
          "params": "eventName"
        },
        {
          "description": "Removes all listeners from the object's list of listeners.",
          "tags": [],
          "doc": "Removes all listeners from the object's list of listeners.\n\n**Syntax:**\n\n    object:removeAllEventListeners()",
          "name": "object:removeAllEventListeners",
          "type": 0,
          "params": ""
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/gamenetwork/OpenFeint.lua",
    "filename": "api/gamenetwork/OpenFeint",
    "moduleName": "api.gamenetwork.OpenFeint",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "OpenFeint is a 3rd party library that enables social gaming features such as public leaderboards and achievements. For more information, see http://www.openfeint.com/ and http://www.openfeint.com/developers.",
          "tags": [
            {
              "name": "module",
              "value": "framework.api.gamenetwork.OpenFeint"
            }
          ],
          "doc": "OpenFeint is a 3rd party library that enables social gaming features such as public leaderboards and achievements. For more information, see http://www.openfeint.com/ and http://www.openfeint.com/developers.\n\n@module framework.api.gamenetwork.OpenFeint",
          "name": "init",
          "type": 0,
          "params": "params"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/GameNetwork.lua",
    "filename": "api/GameNetwork",
    "moduleName": "api.GameNetwork",
    "tags": {
      "moduleDocs": [
        "Game Network allows access to 3rd party libraries that enables social gaming features\nsuch as public leaderboards and achievements.\n\nCurrently, the OpenFeint and Game Center (iOS only) libraries are supported.\n\nIf you want to use both OpenFeint and Game Center, iOS OpenFeint will post achievement\nupdates and leaderboard updates to Game Center provided OFGameCenter.plist is present\nin the project folder.\n\nSee http://support.openfeint.com/dev/game-center-compatibility/ for details.\n\n@module framework.api.GameNetwork"
      ],
      "moduleTags": [
        {
          "name": "module",
          "value": "framework.api.GameNetwork"
        }
      ],
      "functions": [
        {
          "description": "Initializes an app with the parameters (e.g., product key, secret, display name, etc.)",
          "tags": [
            {
              "name": "param",
              "value": "providerName"
            },
            {
              "name": "param",
              "value": "params"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Initializes an app with the parameters (e.g., product key, secret, display name, etc.)\nrequired by the game network provider.\n\n**Syntax:**\n\n    -- OpenFeint\n    framework.api.GameNetwork.init(\"openfeint\", {\n        productKey  = ...,\n        secret      = ...,\n        displayName = ...,\n    })\n\n    -- GameCenter\n    framework.api.GameNetwork.init(\"gamecenter\", {\n        listener = ...\n    })\n\n**Example:**\n\n    require(\"framework.api.GameNetwork\")\n    framework.api.GameNetwork.init(\"openfeint\", {\n        productKey  = ...,\n        secret      = ...,\n        displayName = ...\n    })\n\n    --\n    local achievements = framework.api.GameNetwork.request(\"getAchievements\")\n    dump(achievements, \"All achievements\")\n\n    local leaderboards = framework.api.GameNetwork.request(\"getLeaderboards\")\n    dump(leaderboards, \"All leaderboards\")\n\n    local score = math.random(100, 200)\n    local displayText = string.format(\"My score is %d\", score)\n    framework.api.GameNetwork.request(\"setHighScore\", \"916960912\", score, displayText)\n\n    local i = math.random(#achievements)\n    framework.api.GameNetwork.request(\"unlockAchievement\", achievements[i].id)\n\n    framework.api.GameNetwork.show(\"dashboard\")\n\n**Note:**\n\nGameNetwork only supports one provider at a time (you cannot call this API multiple times for\ndifferent providers).\n\n<br />\n\n\n### Parameters\n\n-   providerName\nString of the game network provider. (\"openfeint\" or \"gamecenter\", case insensitive)\n\n-   params\nAdditional parameters required by the \"openfeint\" provider.\n\n-   **productKey**: String of your application's OpenFeint product key (provided by OpenFeint).\n-   **secret**: String of your application's product secret (provided by OpenFeint).\n-   **displayName**: String of the name to display in OpenFeint leaderboards and other views.\n\nIf using GameCenter, the params.listener allows you to specify a callback function.\n(Instead of secret keys, your bundle identifier is used automatically to identify your app.)\nOn successful login, event.data will be 'true'. On unsuccessful init, event.data will be false.\nWhen problems such as network errors occur, event.errorCode (integer) and event.errorString\n(string) will be defined.\n\nAlso be aware that iOS backgrounding will cause your app to automatically log out your user\nfrom Game Center. When the app is resumed, Game Center will automatically try to re-login\nyour user. The callback function you specified here will be invoked again telling you the\nresult of that re-login attempt. Thus, this callback function exists for the life of your\napplication. With Game Center, it is advisable to avoid calling other Game Center functions\nwhen the user is not logged in.\n\n\n### Returns\n\n-   Nothing.",
          "name": "GameNetwork.init",
          "type": 0,
          "params": "providerName, params"
        },
        {
          "description": "Send or request information to/from the game network provider:",
          "tags": [
            {
              "name": "param",
              "value": "command"
            },
            {
              "name": "param",
              "value": "..."
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Send or request information to/from the game network provider:\n\n**Syntax:**\n\n    GameNetwork.request( command [, params ...] )\n\n**Example:**\n\n    -- For OpenFeint:\n    -- setHighScore, leaderboard id, score, display text\n    GameNetwork.request(\"setHighScore\", \"abc123\", 99, \"99 sec\")\n\n    -- unlockAchievement, achievement id\n    GameNetwork.request(\"unlockAchievement\", \"1242345322\")\n\n\n**OpenFeint**\n\nCommand supported by the OpenFeint provider:\n\n-   getAchievements:\n\n        local achievements = framework.api.GameNetwork.request(\"getAchievements\")\n        for achievementId, achievement in pairs(achievements) do\n            -- achievement.id (string)\n            -- achievement.title (string)\n            -- achievement.description (string)\n            -- achievement.iconUrl (string)\n            -- achievement.gameScore (integer)\n            -- achievement.isUnlocked (boolean)\n            -- achievement.isSecret (boolean)\n        end\n\n-   unlockAchievement: achievement id\n\n        framework.api.GameNetwork.request(\"unlockAchievement\", \"1242345322\")\n\n-   getLeaderboards:\n\n        local leaderboards = framework.api.GameNetwork.request(\"getLeaderboards\")\n        for i, leaderboard = ipairs(leaderboards) do\n            -- leaderboard.id (string)\n            -- leaderboard.name (string)\n            -- leaderboard.currentUserScore (integer)\n            -- leaderboard.currentUserScoreDisplayText (string)\n            -- leaderboard.descendingScoreOrder (boolean)\n        end\n\n-   setHighScore: leaderboard id, score, display text\n\n        framework.api.GameNetwork.request(\"setHighScore\", \"abc123\", 99, \"99 sec\")\n\n\n**GameCenter**\n\nComing soon.\n\n<br />\n\n\n### Parameters\n\n-   command\nCommand string supported by the provider (case insensitive).\n\n-   ...\nParmeters used in the commands.\n\n\n### Returns\n\n-   Nothing.",
          "name": "GameNetwork.request",
          "type": 0,
          "params": "command, ..."
        },
        {
          "description": "Shows (displays) information from game network provider on the screen.",
          "tags": [
            {
              "name": "param",
              "value": "command"
            },
            {
              "name": "param",
              "value": "..."
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Shows (displays) information from game network provider on the screen.\n\nFor OpenFeint provider, launches the OpenFeint dashboard in one of the following configurations: leaderboards, challenges, achievements, friends, playing or high score.\n\n**Syntax:**\n\n    framework.api.GameNetwork.show(command [, params] )\n\n**Example:**\n\n    framework.api.GameNetwork(\"leaderboards\")\n\n**OpenFeint:**\n\nCommand supported by the OpenFeint provider.\n\n-   leaderboard: leaderboard id\n\n        framework.api.GameNetwork.show(\"leaderboard\", \"abc123\")\n\n-   leaderboards:\n\n        framework.api.GameNetwork.show(\"leaderboards\")\n\n-   achievements:\n\n        framework.api.GameNetwork.show(\"achievements\")\n\n-   challenges:\n\n        framework.api.GameNetwork.show(\"challenges\")\n\n-   friends:\n\n        framework.api.GameNetwork.show(\"friends\")\n\n-   playing:\n\n        framework.api.GameNetwork.show(\"playing\")\n\n-   dashboard:\n\n        framework.api.GameNetwork.show(\"dashboard\")\n\n\n**GameCenter:**\n\nComing soon.\n\n<br />\n\n\n### Parameters\n\n-   command\nStrings supported by provider.\n\n-   ...\nParameters used by command.\n\n\n### Returns\n\n-   Nothing.",
          "name": "GameNetwork.show",
          "type": 0,
          "params": "command, ..."
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/GameState.lua",
    "filename": "api/GameState",
    "moduleName": "api.GameState",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/Localize.lua",
    "filename": "api/Localize",
    "moduleName": "api.Localize",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/Store.lua",
    "filename": "api/Store",
    "moduleName": "api.Store",
    "tags": {
      "moduleDocs": [
        "This feature allows you to support In-App Purchases. Currently, only the Apple iTunes Store is supported. In the future, other store fronts may be added.\n\n@module framework.api.Store"
      ],
      "moduleTags": [
        {
          "name": "module",
          "value": "framework.api.Store"
        }
      ],
      "functions": [
        {
          "description": "Activates In-App Purchases.",
          "tags": [
            {
              "name": "tparam",
              "value": "function listener"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Activates In-App Purchases.\n\nStarts up the In-App Purchase engine and allows you to receive callbacks with the listener function you specify.\n\n**Syntax:**\n\n    framework.api.Store.init(listener)\n\n**Example:**\n\n    function transactionCallback(event)\n        local transaction = event.transaction\n        if transaction.state == \"purchased\" then\n            print(\"Transaction succuessful!\")\n            print(\"productIdentifier\", transaction.productIdentifier)\n            print(\"quantity\", transaction.quantity)\n            print(\"transactionIdentifier\", transaction.transactionIdentifier)\n            print(\"date\", os.date(\"%Y-%m-%d %H:%M:%S\", transaction.date))\n            print(\"receipt\", transaction.receipt)\n        elseif  transaction.state == \"restored\" then\n            print(\"Transaction restored (from previous session)\")\n            print(\"productIdentifier\", transaction.productIdentifier)\n            print(\"receipt\", transaction.receipt)\n            print(\"transactionIdentifier\", transaction.identifier)\n            print(\"date\", transaction.date)\n            print(\"originalReceipt\", transaction.originalReceipt)\n            print(\"originalTransactionIdentifier\", transaction.originalIdentifier)\n            print(\"originalDate\", transaction.originalDate)\n        elseif transaction.state == \"failed\" then\n            print(\"Transaction failed\")\n            print(\"errorCode\", transaction.errorCode)\n            print(\"errorString\", transaction.errorString)\n        else\n            print(\"unknown event\")\n        end\n\n        -- Once we are done with a transaction, call this to tell the store\n        -- we are done with the transaction.\n        -- If you are providing downloadable content, wait to call this until\n        -- after the download completes.\n        framework.api.Store.finishTransaction(transaction)\n    end\n\n    framework.api.Store.init(transactionCallback)\n\n<br />\n\n@tparam function listener\nThis is the listener that will handle transaction callback events.\n\n\n### Returns\n\n-   Nothing.",
          "name": "Store.init",
          "type": 0,
          "params": "listener"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.getReceiptVerifyMode",
          "type": 0,
          "params": ""
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.setReceiptVerifyMode",
          "type": 0,
          "params": "mode, isSandbox"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.getReceiptVerifyServerUrl",
          "type": 0,
          "params": ""
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.setReceiptVerifyServerUrl",
          "type": 0,
          "params": "url"
        },
        {
          "description": "Returns true if purchases are allowed, false otherwise.",
          "tags": [
            {
              "name": "return",
              "value": "Returns true if purchases are allowed, false otherwise."
            }
          ],
          "doc": "Returns true if purchases are allowed, false otherwise.\n\n**Syntax:**\n\n    value = framework.api.Store.canMakePurchases\n\n**Example:**\n\n    if framework.api.Store.canMakePurchases() then\n        framework.api.Store.purchase(productId)\n    else\n        print(\"Store purchases are not available\")\n    end\n\n**Note:**\n\niOS devices have a setting that disables purchasing. A common case for this is to prevent children from accidentally purchasing things without parents' permission. Corona provides an API to check whether purchasing is possible. Use this preemptively to avoid having your users navigate through many purchase steps only to find out at the last step that purchasing is forbidden.\n\n<br />\n\n\n### Returns\n\n-   Returns true if purchases are allowed, false otherwise.",
          "name": "Store.canMakePurchases",
          "type": 0,
          "params": ""
        },
        {
          "description": "Retrieves information about items available for sale.",
          "tags": [
            {
              "name": "tparam",
              "value": "table productsId"
            },
            {
              "name": "tparam",
              "value": "function listener"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Retrieves information about items available for sale.\nThis includes the price of each item, a localized name, and a localized description.\n\n**Syntax:**\n\n    framework.api.Store.loadProducts(arrayOfProductIdentifiers, listener)\n\n**Example:**\n\n    function productCallback(event)\n        print(\"showing valid products\", #event.products)\n        for i=1, #event.products do\n            print(event.products[i].title)              -- string.\n            print(event.products[i].description)        -- string.\n            print(event.products[i].price)              -- number.\n            print(event.products[i].localizedPrice)     -- string.\n            print(event.products[i].productIdentifier)  -- string.\n        end\n\n        print(\"showing invalidProducts\", #event.invalidProducts)\n        for i=1, #event.invalidProducts do\n            print(event.invalidProducts[i])\n        end\n    end\n\n    local productsId = {\n        \"com.anscamobile.NewExampleInAppPurchase.ConsumableTier1\",\n        \"com.anscamobile.NewExampleInAppPurchase.NonConsumableTier1\",\n        \"com.anscamobile.NewExampleInAppPurchase.SubscriptionTier1\",\n        -- \"bad.product.id\",\n    }\n\n    framework.api.Store.loadProducts(productsId, productCallback)\n\n<br />\n\n@tparam table productsId\nA Lua array with each element containing a string which is the product identifier of the in-app item you want to know about.\n\n@tparam function listener\nA callback function that is invoked when the store finishes retrieving the product information.\n\n\n### Returns\n\n-   Nothing.",
          "name": "Store.loadProducts",
          "type": 0,
          "params": "productsId, listener"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.cancelLoadProducts",
          "type": 0,
          "params": ""
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "Store.isProductLoaded",
          "type": 0,
          "params": "productId"
        },
        {
          "description": "Initiates a purchase transaction on a provided list of products.",
          "tags": [
            {
              "name": "param",
              "value": "productId"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Initiates a purchase transaction on a provided list of products.\n\nThis function will send out purchase requests to the store. The listener you specified in framework.api.Store.init() will be invoked when the store finishes processing the transaction.\n\n**Syntax:**\n\n    framework.api.Store.purchase(productId)\n\n**Example:**\n\n    framework.api.Store.purchase(\"com.framework.example.ConsumableTier1\")\n\n<br />\n\n\n### Parameters\n\n-   productId\nA string which is the product identifier string.\n\n\n### Returns\n\n-   Nothing.",
          "name": "Store.purchase",
          "type": 0,
          "params": "productId"
        },
        {
          "description": "Notifies the App Store that a transaction is complete.",
          "tags": [
            {
              "name": "tparam",
              "value": "table transaction"
            },
            {
              "name": "return",
              "value": "Nothing."
            }
          ],
          "doc": "Notifies the App Store that a transaction is complete.\n\nAfter you finish handling a transaction, you must call framework.api.Store.finishTransaction() on the transaction object. If you don't do this, the App Store will think your transaction was interrupted and will attempt to resume it on the next application launch.\n\n**Syntax:**\n\n    framework.api.Store.finishTransaction(transaction)\n\n@tparam table transaction\nThe transaction object belonging to the transaction you want to mark as finished.\n\n\n### Returns\n\n-   Nothing.",
          "name": "Store.finishTransaction",
          "type": 0,
          "params": "transaction"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/api/Timer.lua",
    "filename": "api/Timer",
    "moduleName": "api.Timer",
    "tags": {
      "moduleDocs": [
        "Timer 实现了一个计时器容器，用于跟踪应用中所有需要计时的事件。"
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "创建一个计时器。",
          "tags": [],
          "doc": "创建一个计时器。\n\n**Returns:**\n\n-   Timer 对象",
          "name": "Timer.new",
          "type": 0,
          "params": ""
        },
        {
          "description": "添加一个计时器。",
          "tags": [],
          "doc": "添加一个计时器。\n\n在计时器倒计时完成前，会按照 **interval** 参数指定的时间间隔触发 **eventName** 参数指定的事件。\n事件参数则是倒计时还剩余的时间。\n\n在计时器倒计时完成后，同样会触发 **eventName** 参数指定的事件。此时事件的参数是 0，表示倒计时完成。\n\n因此在事件处理函数中，可以通过事件参数判断倒计时是否已经结束：\n\n    local Timer = require(\"framework.api.Timer\")\n    local appTimer = Timer.new()\n\n    -- 响应 CITYHALL_UPGRADE_TIMER 事件\n    local function onCityHallUpgradeTimer(event)\n        if event.countdown > 0 then\n            -- 倒计时还未结束，更新用户界面上显示的时间\n            ....\n        else\n            -- 倒计时已经结束，更新用户界面显示升级后的城防大厅\n        end\n    end\n\n    -- 注册事件\n    appTimer:addEventListener(\"CITYHALL_UPGRADE_TIMER\", onCityHallUpgradeTimer)\n    -- 城防大厅升级需要 3600 秒，每 30 秒更新一次界面显示\n    appTimer:addCountdown(\"CITYHALL_UPGRADE_TIMER\", 3600, 30)\n\n考虑移动设备的特殊性，计时器可能存在一定误差，所以 **interval** 参数的最小值是 2 秒。\n在界面上需要显示倒计时的地方，应该以“分”为单位。例如显示为“2 小时 23 分”，这样可以避免误差带来的问题。\n\n### 注意\n\n计时器在倒计时结束并触发事件后，会自动删除。关联到这个计时器的所有事件处理函数也会被取消。\n\n\n**Parameters:**\n\n-   eventName: 计时器事件的名称\n-   countdown: 倒计时（秒）\n-   interval（可选）: 检查倒计时的时间间隔，最小为 5 秒，最长为 120 秒，如果未指定则默认为 30 秒",
          "name": "timer:addCountdown",
          "type": 0,
          "params": "eventName, countdown, interval"
        },
        {
          "description": "删除指定事件名称对应的计时器，并取消这个计时器的所有事件处理函数。",
          "tags": [],
          "doc": "删除指定事件名称对应的计时器，并取消这个计时器的所有事件处理函数。\n\n**Parameters:**\n\n-   eventName: 计时器事件的名称",
          "name": "timer:removeCountdown",
          "type": 0,
          "params": "eventName"
        },
        {
          "description": "启动计时器容器。",
          "tags": [],
          "doc": "启动计时器容器。\n\n在开始游戏时调用这个方法，确保所有的计时器事件都正确触发。",
          "name": "timer:start",
          "type": 0,
          "params": ""
        },
        {
          "description": "停止计时器容器。",
          "tags": [],
          "doc": "停止计时器容器。",
          "name": "timer:stop",
          "type": 0,
          "params": ""
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/audio.lua",
    "filename": "audio",
    "moduleName": "audio",
    "tags": {
      "moduleDocs": [
        "Play music, sound effects."
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "Disable audio sharedEngine.",
          "tags": [],
          "doc": "Disable audio sharedEngine.",
          "name": "audio.disable",
          "type": 0,
          "params": ""
        },
        {
          "description": "Enable audio sharedEngine. (default is enabled)",
          "tags": [],
          "doc": "Enable audio sharedEngine. (default is enabled)",
          "name": "audio.enable",
          "type": 0,
          "params": ""
        },
        {
          "description": "The volume of the background music. max value is 1.0, the min value is 0.0",
          "tags": [],
          "doc": "The volume of the background music. max value is 1.0, the min value is 0.0\n\n### Returns:\n\n-   The volume of the background music\n\n### Alias:\n\n-   audio.getBackgroundMusicVolume()",
          "name": "audio.getMusicVolume",
          "type": 0,
          "params": ""
        },
        {
          "description": "Set the volume of background music",
          "tags": [],
          "doc": "Set the volume of background music\n\n### Parameters:\n\n-   float **volume** must be in 0.0 ~ 1.0\n\n### Alias:\n\n-   audio.setBackgroundMusicVolume()",
          "name": "audio.setMusicVolume",
          "type": 0,
          "params": "volume"
        },
        {
          "description": "The volume of the effects. max value is 1.0, the min value is 0.0",
          "tags": [],
          "doc": "The volume of the effects. max value is 1.0, the min value is 0.0\n\n### Returns:\n\n-   The volume of the effects\n\n### Alias:\n\n-   audio.getEffectsVolume()",
          "name": "audio.getSoundsVolume",
          "type": 0,
          "params": ""
        },
        {
          "description": "Set the volume of sound effecs",
          "tags": [],
          "doc": "Set the volume of sound effecs\n\n### Parameters:\n\n-   float **volume** must be in 0.0 ~ 1.0\n\n### Alias:\n\n-   audio.setEffectsVolume()",
          "name": "audio.setSoundsVolume",
          "type": 0,
          "params": "volume"
        },
        {
          "description": "Preload background music",
          "tags": [],
          "doc": "Preload background music\n\n### Parameters:\n\n-   string **filename** The path of the background music file\n\n### Alias:\n\n-   audio.preloadBackgroundMusic()",
          "name": "audio.preloadMusic",
          "type": 0,
          "params": "filename"
        },
        {
          "description": "Play background music",
          "tags": [],
          "doc": "Play background music\n\n### Parameters:\n\n-   string **filename** The path of the background music file\n-   [_optional bool **isLoop**_] Whether the background music loop or not\n\n### Alias:\n\n-   audio.playBackgroundMusic()",
          "name": "audio.playMusic",
          "type": 0,
          "params": "filename, isLoop"
        },
        {
          "description": "Stop playing background music",
          "tags": [],
          "doc": "Stop playing background music\n\n### Parameters:\n\n-   bool **isReleaseData** If release the background music data or not. As default value is false\n\n### Alias:\n\n-   audio.stopBackgroundMusic()",
          "name": "audio.stopMusic",
          "type": 0,
          "params": "isReleaseData"
        },
        {
          "description": "Pause playing background music",
          "tags": [],
          "doc": "Pause playing background music\n\n### Alias:\n\n-   audio.pauseBackgroundMusic()",
          "name": "audio.pauseMusic",
          "type": 0,
          "params": ""
        },
        {
          "description": "Resume playing background music",
          "tags": [],
          "doc": "Resume playing background music\n\n### Alias:\n\n-   audio.resumeBackgroundMusic()",
          "name": "audio.resumeMusic",
          "type": 0,
          "params": ""
        },
        {
          "description": "Rewind playing background music",
          "tags": [],
          "doc": "Rewind playing background music\n\n### Alias:\n\n-   audio.rewindBackgroundMusic()",
          "name": "audio.rewindMusic",
          "type": 0,
          "params": ""
        },
        {
          "description": "### Alias:",
          "tags": [],
          "doc": "### Alias:\n\n-   audio.willPlayBackgroundMusic()",
          "name": "audio.willPlayMusic",
          "type": 0,
          "params": ""
        },
        {
          "description": "Whether the background music is playing",
          "tags": [],
          "doc": "Whether the background music is playing\n\n### Returns:\n\n-   If is playing return true,or return false\n\n### Alias:\n\n-   audio.isBackgroundMusicPlaying()",
          "name": "audio.isMusicPlaying",
          "type": 0,
          "params": ""
        },
        {
          "description": "Play sound effect",
          "tags": [],
          "doc": "Play sound effect\n\n### Parameters:\n\n-   string **filename** The path of the effect file\n-   [_optional bool **isLoop**_] Whether to loop the effect playing, default value is false\n\n### Returns:\n\n-   int: Handle of sound effect\n\n### Alias:\n\n-   audio.playEffect()",
          "name": "audio.playSound",
          "type": 0,
          "params": "filename, isLoop"
        },
        {
          "description": "Pause playing sound effect",
          "tags": [],
          "doc": "Pause playing sound effect\n\n### Parameters:\n\n-   int **handle** The return value of function playEffect\n\n### Alias:\n\n-   audio.pauseEffect()",
          "name": "audio.pauseSound",
          "type": 0,
          "params": "handle"
        },
        {
          "description": "Pause all playing sound effect",
          "tags": [],
          "doc": "Pause all playing sound effect\n\n### Alias:\n\n-   audio.pauseAllEffects()",
          "name": "audio.pauseAllSounds",
          "type": 0,
          "params": ""
        },
        {
          "description": "Resume paused sound effect",
          "tags": [],
          "doc": "Resume paused sound effect\n\n### Parameters:\n\n-   int **handle** The return value of function playEffect\n\n### Alias:\n\n-   audio.resumeEffect()",
          "name": "audio.resumeSound",
          "type": 0,
          "params": "handle"
        },
        {
          "description": "Resume all paused sound effects",
          "tags": [],
          "doc": "Resume all paused sound effects\n\n### Alias:\n\n-   audio.resumeAllEffects()",
          "name": "audio.resumeAllSounds",
          "type": 0,
          "params": "handle"
        },
        {
          "description": "Stop playing sound effect",
          "tags": [],
          "doc": "Stop playing sound effect\n\n### Parameters:\n\n-   int **handle** The return value of function playEffect\n\n### Alias:\n\n-   audio.stopEffect()",
          "name": "audio.stopSound",
          "type": 0,
          "params": "handle"
        },
        {
          "description": "Stop all playing sound effects",
          "tags": [],
          "doc": "Stop all playing sound effects\n\n### Alias:\n\n-   audio.stopAllEffects()",
          "name": "audio.stopAllSounds",
          "type": 0,
          "params": ""
        },
        {
          "description": "Preload a sound effect",
          "tags": [],
          "doc": "Preload a sound effect\n\n### Parameters:\n\n-   string **filename** The path of the effect file\n\n### Alias:\n\n-   audio.preloadEffect()",
          "name": "audio.preloadSound",
          "type": 0,
          "params": "filename"
        },
        {
          "description": "Unload the preloaded effect",
          "tags": [],
          "doc": "Unload the preloaded effect\n\n### Parameters:\n\n-   string **filename** The path of the effect file\n\n### Alias:\n\n-   audio.unloadEffect()",
          "name": "audio.unloadSound",
          "type": 0,
          "params": "filename"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/cocos2dx/CCLayerExtend.lua",
    "filename": "cocos2dx/CCLayerExtend",
    "moduleName": "cocos2dx.CCLayerExtend",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/cocos2dx/CCNodeExtend.lua",
    "filename": "cocos2dx/CCNodeExtend",
    "moduleName": "cocos2dx.CCNodeExtend",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend.extend",
          "type": 0,
          "params": "target"
        },
        {
          "description": "Set node object anchorPoint and position.",
          "tags": [],
          "doc": "Set node object anchorPoint and position.\n\n### Example:\n\n    sprite:align(display.LEFT_TOP, 100, 100)\n\n### Parameters:\n\n-   enum **anchorPoint** is one of the following:\n\n    enum                                              | Value\n    ------------------------------------------------- | ----------------------\n    display.CENTER                                    | CCPoint(0.5, 0.5)\n    display.TOP_LEFT,<br />display.LEFT_TOP           | CCPoint(  0,   1)\n    display.TOP_CENTER,<br />display.CENTER_TOP       | CCPoint(0.5,   1)\n    display.TOP_RIGHT,<br />display.RIGHT_TOP         | CCPoint(  1,   1)\n    display.CENTER_LEFT,<br />display.LEFT_CENTER     | CCPoint(  0, 0.5)\n    display.CENTER_RIGHT,<br />display.RIGHT_CENTER   | CCPoint(  1, 0.5)\n    display.BOTTOM_LEFT,<br />display.LEFT_BOTTOM     | CCPoint(  0,   0)\n    display.BOTTOM_RIGHT,<br />display.RIGHT_BOTTOM   | CCPoint(  1,   0)\n    display.BOTTOM_CENTER,<br />display.CENTER_BOTTOM | CCPoint(0.5,   0)\n\n-   [_optional float **x**, float **y**_] position of the node",
          "name": "CCNodeExtend:align",
          "type": 0,
          "params": "anchorPoint, x, y"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend:removeFromParentAndCleanup",
          "type": 0,
          "params": "isCleanup"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend:removeSelf",
          "type": 0,
          "params": "isCleanup"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend:scheduleUpdate",
          "type": 0,
          "params": "callback, priority"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend:schedule",
          "type": 0,
          "params": "callback, interval"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "CCNodeExtend:performWithDelay",
          "type": 0,
          "params": "callback, delay"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/cocos2dx/CCSceneExtend.lua",
    "filename": "cocos2dx/CCSceneExtend",
    "moduleName": "cocos2dx.CCSceneExtend",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/cocos2dx/CCShapeNodeExtend.lua",
    "filename": "cocos2dx/CCShapeNodeExtend",
    "moduleName": "cocos2dx.CCShapeNodeExtend",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/cocos2dx/CCSpriteExtend.lua",
    "filename": "cocos2dx/CCSpriteExtend",
    "moduleName": "cocos2dx.CCSpriteExtend",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/crypto.lua",
    "filename": "crypto",
    "moduleName": "crypto",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.encryptAES256",
          "type": 0,
          "params": "plaintext, key"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.decryptAES256",
          "type": 0,
          "params": "ciphertext, key"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.encryptXXTEA",
          "type": 0,
          "params": "plaintext, key"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.decryptXXTEA",
          "type": 0,
          "params": "ciphertext, key"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.encodeBase64",
          "type": 0,
          "params": "plaintext"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.decodeBase64",
          "type": 0,
          "params": "ciphertext"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "crypto.md5",
          "type": 0,
          "params": "input, isRawOutput"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/debug.lua",
    "filename": "debug",
    "moduleName": "debug",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "Debug functions.",
          "tags": [],
          "doc": "Debug functions.\n\n## Functions ##\n\n-   echo\n-   echoInfo\n-   echoError\n-   printf",
          "name": "echo",
          "type": 0,
          "params": "..."
        },
        {
          "description": "Output a formatted string.",
          "tags": [
            {
              "name": "see",
              "value": "echo"
            },
            {
              "name": "param",
              "value": "string format"
            },
            {
              "name": "param",
              "value": "mixed ..."
            },
            {
              "name": "see",
              "value": "echo"
            }
          ],
          "doc": "Output a formatted string.\n\nDepends on the platform, output to console or log file. @see echo().\n\n\n### Parameters\n\n-   string **format**\n-   mixed **...**\n\n@see echo",
          "name": "printf",
          "type": 0,
          "params": "fmt, ..."
        },
        {
          "description": "Dumps information about a variable.",
          "tags": [
            {
              "name": "param",
              "value": "mixed object"
            },
            {
              "name": "param",
              "value": "string label"
            },
            {
              "name": "param",
              "value": "bool isReturnContents"
            },
            {
              "name": "param",
              "value": "int nesting"
            },
            {
              "name": "return",
              "value": "nil"
            }
          ],
          "doc": "Dumps information about a variable.\n\n\n### Parameters\n\n-   mixed **object**\n-   string **label**\n-   bool **isReturnContents**\n-   int **nesting**\n\n### Returns\n\n-   nil",
          "name": "dump",
          "type": 0,
          "params": "object, label, isReturnContents, nesting"
        },
        {
          "description": "Outputs or returns a parsable string representation of a variable.",
          "tags": [
            {
              "name": "param",
              "value": "mixed object"
            },
            {
              "name": "param",
              "value": "string label"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Outputs or returns a parsable string representation of a variable.\n\n\n### Parameters\n\n-   mixed **object**\n-   string **label**\n\n### Returns\n\n-   string",
          "name": "vardump",
          "type": 0,
          "params": "object, label"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/device.lua",
    "filename": "device",
    "moduleName": "device",
    "tags": {
      "moduleDocs": [
        "Query information about the system (get device information, current language, etc) and execute system functions (show alert view, show input box, etc).\n\n<br />\n\nFollowing properties predefined:\n\n-   **device.platform** the platform name (the OS name), i.e. one of the following: ios, android, blackberry, mac, windows, linux.\n\n-   **device.environment** returns the environment that the app is running in. i.e. one of the following: simulator, device.\n\n-   **device.model** returns the device model (as specified by the manufacturer) :\n\n    - On iOS: return iPhone, iPad\n    - On Android: return Android device model name\n    - On Mac, windows, linux: return \"unknown\"\n\n-   **device.language** returns the default language on the device :\n\n    Value       | Language\n    ----------- | -------------\n    cn          | Chinese\n    fr          | French\n    it          | Italian\n    gr          | German\n    sp          | Spanish\n    ru          | Russian\n    jp          | Japanese\n    en          | English\n\n-   **device.writablePath** returns the writable path."
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "Displays a platform-specific activity indicator.",
          "tags": [],
          "doc": "Displays a platform-specific activity indicator.\n\n### Note:\n\nSupported platform: ios, android.",
          "name": "device.showActivityIndicator",
          "type": 0,
          "params": ""
        },
        {
          "description": "Hides activity indicator.",
          "tags": [],
          "doc": "Hides activity indicator.\n\n### Note:\n\nSupported platform: ios, android.",
          "name": "device.hideActivityIndicator",
          "type": 0,
          "params": ""
        },
        {
          "description": "Displays a popup alert box with one or more buttons. Program activity, including animation, will continue in the background, but all other user interactivity will be blocked until the user selects a button or cancels the dialog.",
          "tags": [],
          "doc": "Displays a popup alert box with one or more buttons. Program activity, including animation, will continue in the background, but all other user interactivity will be blocked until the user selects a button or cancels the dialog.\n\n### Paramters:\n\n-   string **title** The title string displayed in the alert\n\n-   string **message** Message string displayed in the alert text.\n\n-   table **buttonLabels** Table of strings, each of which will create a button with the corresponding label.\n\n-   function **listener** The listener to be notified when a user presses any button in the alert box.\n\n### Note:\n\nSupported platform: ios, android, mac.",
          "name": "device.showAlert",
          "type": 0,
          "params": "title, message, buttonLabels, listener"
        },
        {
          "description": "Dismisses an alert box programmatically.",
          "tags": [],
          "doc": "Dismisses an alert box programmatically.\n\nFor example, you may wish to have a popup alert that automatically disappears after ten seconds even if the user doesn’t click it. In that case, you could call this function at the end of a ten-second timer.\n\n### Note:\n\nSupported platform: ios, android, mac.",
          "name": "device.cancelAlert",
          "type": 0,
          "params": ""
        },
        {
          "description": "Returns OpenUDID for device.",
          "tags": [],
          "doc": "Returns OpenUDID for device.\n\n> OpenUDID is a drop-in replacement for the deprecated uniqueIdentifier property of the UIDevice class on iOS (a.k.a. UDID) and otherwise is an industry-friendly equivalent for iOS and Android.\n\n### Returns:\n\n-   string OpenUDID\n\n### Note:\n\nSupported platform: ios, android, mac.",
          "name": "device.getOpenUDID",
          "type": 0,
          "params": ""
        },
        {
          "description": "Open a web page in the browser; create an email; or call a phone number.",
          "tags": [
            {
              "name": "mycompany",
              "value": ""
            },
            {
              "name": "mycompany",
              "value": ""
            }
          ],
          "doc": "Open a web page in the browser; create an email; or call a phone number.\n\nNote: Executing this function will make the app background and switch to the built-in browser, email or phone app.\n\n### Parameters:\n\n-   string **url** url can be one of the following:\n\n    -   Web link: \"http://dualface.github.com/quick-cocos2d-x/\"\n\n-   Email address: \"mailto:nobody@mycompany.com\".\n\n        The email address url can also contain subject and body parameters, both of which must be url encoded.<br />\nExample: \"mailto:nobody@mycompany.com?subject=Hi%20there&body=I%20just%20wanted%20to%20say%2C%20Hi!\"<br />\n        Try this URL encoder to encode your text.\n\n    -   Phone number: \"tel:123-456-7890\"\n\n### Note:\n\nSupported platform: ios, android.",
          "name": "device.openURL",
          "type": 0,
          "params": "url"
        },
        {
          "description": "Displays a popup input dialog with ok and cancel button.",
          "tags": [],
          "doc": "Displays a popup input dialog with ok and cancel button.\n\n### Parameters:\n\n-   string **title** The title string displayed in the input dialog\n-   string **message** Message string displayed in the input dialog\n-   string **defaultValue** Displayed in the text box.\n\n### Returns:\n\n-   string User entered text. If uesr cancel input dialog, return nil.\n\n### Note:\n\nSupported platform: mac, windows.",
          "name": "device.showInputBox",
          "type": 0,
          "params": "title, message, defaultValue"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/display.lua",
    "filename": "display",
    "moduleName": "display",
    "tags": {
      "moduleDocs": [
        "The display module provides access to cocos2d-x core features.\n\n-   Query display screen information.\n-   Mange scenes.\n-   Creates display objects."
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.setTexturePixelFormat",
          "type": 0,
          "params": "filename, format"
        },
        {
          "description": "Creates a scene.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "optional",
              "value": "string name name of scene"
            },
            {
              "name": "return",
              "value": "CCScene"
            }
          ],
          "doc": "Creates a scene.\n\nA scene (implemented with the CCScene object) is more or less an independent piece of the app workflow. Some people may call them “screens” or “stages”. Your app can have many scenes, but only one of them is active at a given time.\n\n### Example\n\n    local scene = display.newScene(\"HelloScene\")\n    display.replaceScene(scene) -- setup running scene\n\n\n### Parameters\n\n-   [_optional string **name**_] name of scene\n\n\n### Returns\n\n-   CCScene",
          "name": "display.newScene",
          "type": 0,
          "params": "name"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.wrapSceneWithTransition",
          "type": 0,
          "params": "scene, transitionType, time, more"
        },
        {
          "description": "Replaces the running scene with a new one.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "param",
              "value": "CCScene newScene scene of want to display"
            },
            {
              "name": "optional",
              "value": "string transitionType is one of the following"
            },
            {
              "name": "optional",
              "value": "float time duration of the transition"
            },
            {
              "name": "optional",
              "value": "mixed more parameter for the transition"
            }
          ],
          "doc": "Replaces the running scene with a new one.\n\n### Example\n\n    display.replaceScene(scene1)\n    display.replaceScene(scene2, \"CROSSFADE\", 0.5)\n    display.replaceScene(scene3, \"FADE\", 0.5, ccc3(255, 255, 255))\n\n\n### Parameters\n\n-   CCScene **newScene** scene of want to display\n-   [_optional string **transitionType**_] is one of the following\n\nTransition Type | Note\n--------------- | ----\nCROSSFADE       | Cross fades two scenes using the CCRenderTexture object\nFADE            | Fade out the outgoing scene and then fade in the incoming scene\nFADEBL          | Fade the tiles of the outgoing scene from the top-right corner to the bottom-left corner\nFADEDOWN        | Fade the tiles of the outgoing scene from the top to the bottom\nFADETR          | Fade the tiles of the outgoing scene from the left-bottom corner the to top-right corner\nFADEUP          | Fade the tiles of the outgoing scene from the bottom to the top\nFLIPANGULAR     | Flips the screen half horizontally and half vertically\nFLIPX           | Flips the screen horizontally\nFLIPY           | Flips the screen vertically\nJUMPZOOM        | Zoom out and jump the outgoing scene, and then jump and zoom in the incoming\nMOVEINB         | Move in from to the bottom the incoming scene\nMOVEINL         | Move in from to the left the incoming scene\nMOVEINR         | Move in from to the right the incoming scene\nMOVEINT         | Move in from to the top the incoming scene\nPAGETURN        | A transition which peels back the bottom right hand corner of a scene to transition to the scene beneath it simulating a page turn\nROTOZOOM        | Rotate and zoom out the outgoing scene, and then rotate and zoom in the incoming\nSHRINKGROW      | Shrink the outgoing scene while grow the incoming scene\nSLIDEINB        | Slide in the incoming scene from the bottom border\nSLIDEINL        | Slide in the incoming scene from the left border\nSLIDEINR        | Slide in the incoming scene from the right border\nSLIDEINT        | Slide in the incoming scene from the top border\nSPLITCOLS       | The odd columns goes upwards while the even columns goes downwards\nSPLITROWS       | The odd rows goes to the left while the even rows goes to the right\nTURNOFFTILES    | Turn off the tiles of the outgoing scene in random order\nZOOMFLIPANGULAR | Flips the screen half horizontally and half vertically doing a little zooming out/in\nZOOMFLIPX       | Flips the screen horizontally doing a zoom out/in The front face is the outgoing scene and the back face is the incoming scene\nZOOMFLIPY       | Flips the screen vertically doing a little zooming out/in The front face is the outgoing scene and the back face is the incoming scene\n\n-   [_optional float **time**_] duration of the transition\n-   [_optional mixed **more**_] parameter for the transition",
          "name": "display.replaceScene",
          "type": 0,
          "params": "newScene, transitionType, time, more"
        },
        {
          "description": "Get current running scene.",
          "tags": [
            {
              "name": "return",
              "value": "CCScene"
            }
          ],
          "doc": "Get current running scene.\n\n\n### Returns\n\n-   CCScene",
          "name": "display.getRunningScene",
          "type": 0,
          "params": ""
        },
        {
          "description": "Pauses the running scene.",
          "tags": [],
          "doc": "Pauses the running scene.",
          "name": "display.pause",
          "type": 0,
          "params": ""
        },
        {
          "description": "Resumes the paused scene.",
          "tags": [],
          "doc": "Resumes the paused scene.",
          "name": "display.resume",
          "type": 0,
          "params": ""
        },
        {
          "description": "Creates CCLayer object.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": "CCLayer"
            }
          ],
          "doc": "Creates CCLayer object.\n\nCCLayer is a subclass of CCNode. all features from CCNode are valid, plus the following new features:\n\n-   It can receive touches\n-   It can receive Accelerometer input\n-   It can receive device hardward keypad input\n\n### Example\n\n    local function onTouch(event, x, y)\n        printf(\"touch %s, x = %0.2f, y = %0.2f\", event, x, y)\n    end\n\n    local layer = display.newLayer()\n    layer:addTouchEventListener(onTouch)\n    layer:setTouchEnabled(true)\n\n\n### Returns\n\n-   CCLayer",
          "name": "display.newLayer",
          "type": 0,
          "params": "noRGBA"
        },
        {
          "description": "Creates a node object.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": "CCNode"
            }
          ],
          "doc": "Creates a node object.\n\nAnything thats gets drawn or contains things that get drawn is a CCNode. The most popular CCNodes are: CCScene, CCLayer, CCSprite, CCMenu.\n\nA CCNode is a \"void\" object. It doesn't have a texture\n\nThe main features of a CCNode are:\n\n-   They can contain other CCNode nodes (addChild, getChildByTag, removeChild, etc)\n-   They can schedule periodic callback (schedule, unschedule, etc)\n-   They can execute actions (runAction, stopAction, etc)\n\nFeatures of CCNode:\n\n-   position\n-   scale (x, y)\n-   rotation (in degrees, clockwise)\n-   CCGridBase (to do mesh transformations)\n-   anchor point\n-   size\n-   visible\n-   z-order\n\n### Example\n\n    local group = display.newNode()     -- create container\n    group:addChild(sprite1)             -- add sprites to container\n    group:addChild(sprite2)             -- add sprites to container\n    transition.moveBy(group, {time = 2.0, x = 100})\n\n\n### Returns\n\n-   CCNode",
          "name": "display.newNode",
          "type": 0,
          "params": "noRGBA"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.newClippingRegionNode",
          "type": 0,
          "params": "rect"
        },
        {
          "description": "Creates a CCSprite object.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "param",
              "value": "string filename image filename or sprite frame name. sprite frame name have prefix character"
            },
            {
              "name": "optional",
              "value": "float x"
            },
            {
              "name": "optional",
              "value": "float y initial position or the sprite"
            },
            {
              "name": "return",
              "value": "CCSprite"
            }
          ],
          "doc": "Creates a CCSprite object.\n\nCCSprite can be created with an image, or with a sprite frame.\n\n### Example\n\n    -- create with an image\n    local sprite1 = display.newSprite(\"hello1.png\")\n\n    -- create with a sprite frame\n    local sprite2 = display.newSprite(\"#frame0001.png\")\n\n\n### Parameters\n\n-   string **filename** image filename or sprite frame name. sprite frame name have prefix character\n-   [_optional float **x**_]\n-   [_optional float **y**_] initial position or the sprite\n\n\n### Returns\n\n-   CCSprite",
          "name": "display.newSprite",
          "type": 0,
          "params": "filename, x, y"
        },
        {
          "description": "Creates a sprite, set position to screen center.",
          "tags": [
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates a sprite, set position to screen center.\n\n### Parameters:\n\n-   string **filename** image filename or sprite frame name.\n\n\n### Returns\n\n-   \n\n-   CCSprite",
          "name": "display.newBackgroundSprite",
          "type": 0,
          "params": "filename"
        },
        {
          "description": "Creates a sprite, repeat sprite's texture to fill whole rect.",
          "tags": [
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates a sprite, repeat sprite's texture to fill whole rect.\n\n### Parameters:\n\n-   string **filename** image filename or sprite frame name.\n\n\n### Returns\n\n-   \n\n-   CCSprite",
          "name": "display.newBackgroundTilesSprite",
          "type": 0,
          "params": "filename"
        },
        {
          "description": "Creates a CCCircleShape object, draw a circle on screen.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates a CCCircleShape object, draw a circle on screen.\n\nCCCircleShape is a subclass of CCShapeNode.\n\nCCShapeNode is a subclass of CCNode. all features from CCNode are valid, plus the following new features:\n\n-   draw shape to screen\n-   set shape line color\n-   set shape line width\n\nCCShapeNode have the following new methods:\n\n-   ccColor4F getColor()\n-   setColor(ccColor4F color)\n-   int getLineWidth()\n-   setLineWidth(int width)\n\nCCCircleShape have the following new methods:\n\n-   float getRadius()\n-   setRadius(float radius)\n-   float getAngle()\n-   setAngle(float angle)\n-   int getSegments()\n-   setSegments(int segments)\n-   bool isDrawLineToCenter()\n-   setDrawLineToCenter(bool drawLineToCenter)\n-   float getScaleX()\n-   setScaleX(float scaleX)\n-   float getScaleY()\n-   setScaleY(float scaleY)\n\n### Example\n\n    local circle = display.newCircle(100) -- raidus = 100 points\n    circle:setColor(255, 255, 255)        -- RGB = 0xffffff, white color\n    circle:setSegments(128)               -- more segments appear smoother, default 32\n    circle:setScaleY(0.8)                 -- Draw an ellipse\n\n### Parameters:\n\n-   float **radius**\n\n\n### Returns\n\n-   \n\n-   CCCircleShape",
          "name": "display.newCircle",
          "type": 0,
          "params": "radius"
        },
        {
          "description": "Creates a CCRectShape object, draw a rectangle on screen.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates a CCRectShape object, draw a rectangle on screen.\n\nCCRectShape is a subclass of CCShapeNode, see [display.newCircle()](#anchor_display_newCircle) .\n\nCCRectShape have the following new methods:\n\n-   setSize(const CCSize& size)\n-   bool isFill()\n-   setFill(bool isFill)\n\n### Example\n\n    local rect = display.newRect(200, 100)\n    rect:setFill(true)\n\n### Parameters:\n\n-   float **width**, float **height** size of rectangle\n\n\n### Returns\n\n-   \n\n-   CCRectShape",
          "name": "display.newRect",
          "type": 0,
          "params": "width, height"
        },
        {
          "description": "Creates a CCPolygon object, draw a polygon on screen.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates a CCPolygon object, draw a polygon on screen.\n\nCCPolygon is a subclass of CCShapeNode, see [display.newCircle()](#anchor_display_newCircle) .\n\nCCPolygon have the following new methods:\n\n-   bool isFill()\n-   setFill(bool isFill)\n-   bool isClose()\n-   setClose(bool isClose)\n\n### Example\n\n    local points = {\n        {10, 10},  -- point 1\n        {50, 50},  -- point 2\n        {100, 10}, -- point 3\n    }\n    local polygon = display.newPolygon(points) -- draw a triangle\n    polygon:setClose(true) -- draw line from last point to first point\n\n### Parameters:\n\n-   table **points** array of points\n\n-   [_optional float **scale**_]\n\n\n### Returns\n\n-   \n\n-   CCPolygonShape",
          "name": "display.newPolygon",
          "type": 0,
          "params": "points, scale"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.align",
          "type": 0,
          "params": "target, anchorPoint, x, y"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.pixels",
          "type": 0,
          "params": "x, y"
        },
        {
          "description": "Adds multiple Sprite Frames from image and plist file.",
          "tags": [
            {
              "name": "example",
              "value": ""
            }
          ],
          "doc": "Adds multiple Sprite Frames from image and plist file.\n\nCreates sprite sheet tools:\n\n-   [Texture Packer](http://www.codeandweb.com/texturepacker)\n-   [Zwoptex](http://www.zwopple.com/zwoptex/)\n\n### Example\n\n    display.addSpriteFramesWithFile(\"sprites.plist\", \"sprites.png\")\n    local sprite1 = display.newSprite(\"#sprite0001.png\")\n\n### Parameters:\n\n-   string **plistFilename** filename of plist file\n\n-   string **image** filename of image",
          "name": "display.addSpriteFramesWithFile",
          "type": 0,
          "params": "plistFilename, image"
        },
        {
          "description": "Removes multiple Sprite Frames from a plist file.",
          "tags": [],
          "doc": "Removes multiple Sprite Frames from a plist file.\n\nSprite Frames stored in this file will be removed. It is convinient to call this method when a specific texture needs to be removed.\n\n### Parameters:\n\n-   string **plistFilename** filename of plist file",
          "name": "display.removeSpriteFramesWithFile",
          "type": 0,
          "params": "plistFilename, imageName"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.removeSpriteFrameByImageName",
          "type": 0,
          "params": "imageName"
        },
        {
          "description": "Creates CCSpriteBatchNode object from an image.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates CCSpriteBatchNode object from an image.\n\nCCSpriteBatchNode is like a batch node: if it contains children, it will draw them in 1 single OpenGL call (often known as \"batch draw\").\n\nA CCSpriteBatchNode can reference one and only one texture (one image file, one texture atlas). Only the CCSprites that are contained in that texture can be added to the CCSpriteBatchNode. All CCSprites added to a CCSpriteBatchNode are drawn in one OpenGL ES draw call. If the CCSprites are not added to a CCSpriteBatchNode then an OpenGL ES draw call will be needed for each one, which is less efficient.\n\nLimitations:\n\n-   The only object that is accepted as child (or grandchild, grand-grandchild, etc...) is CCSprite or any subclass of CCSprite. eg: particles, labels and layer can't be added to a CCSpriteBatchNode.\n-   Either all its children are Aliased or Antialiased. It can't be a mix. This is because \"alias\" is a property of the texture, and all the sprites share the same texture.\n\n### Example\n\n    local imageName = \"sprites.png\"\n    display.addSpriteFramesWithFile(\"sprites.plist\", imageName) -- load sprite frames\n\n    -- it will draw them in 1 single OpenGL call\n    local batch = display.newBatch(imageName)\n    for i = 1, 100 do\n        local sprite = display.newSprite(\"#sprite0001.png\")\n        batch:addChild(sprite)\n    end\n\n    --\n\n    -- it will draw them use 100 OpenGL call\n    local group = display.newNode()\n    for i = 1, 100 do\n        local sprite = display.newSprite(\"#sprite0001.png\")\n        group:addChild(sprite)\n    end\n\n### Parameters:\n\n-   string **image** filename of image\n\n-   [_optional int **capacity**_] estimated capacity of batch\n\n\n### Returns\n\n-   \n\n-   CCSpriteBatchNode",
          "name": "display.newBatchNode",
          "type": 0,
          "params": "image, capacity"
        },
        {
          "description": "Returns an Sprite Frame that was previously added.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Returns an Sprite Frame that was previously added.\n\n### Example\n\n    display.addSpriteFramesWithFile(\"sprites.plist\", \"sprites.png\")\n    local sprite = display.newSprite(\"#sprite0001\")\n\n    local frame2 = display.newSpriteFrame(\"sprite0002.png\")\n    local frame3 = display.newSpriteFrame(\"sprite0003.png\")\n\n    ....\n\n    sprite:setDisplayFrame(frame2)  -- change sprite texture without recreate\n    -- or\n    sprite:setDisplayFrame(frame3)\n\n### Parameters:\n\n-   string **frameName** name of sprite frame, without prefix character '#'.\n\n\n### Returns\n\n-   \n\n-   CCSpriteFrame",
          "name": "display.newSpriteFrame",
          "type": 0,
          "params": "frameName"
        },
        {
          "description": "### Example",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "### Example\n\n### Parameters:\n\n\n### Returns\n\n-",
          "name": "display.newSpriteWithFrame",
          "type": 0,
          "params": "frame, x, y"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "display.newFrame",
          "type": 0,
          "params": "frameName"
        },
        {
          "description": "Creates multiple frames by pattern.",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "return",
              "value": ""
            }
          ],
          "doc": "Creates multiple frames by pattern.\n\n### Example\n\n    -- create array of CCSpriteFrame [walk0001.png -> walk0020.png]\n    local frames = display.newFrames(\"walk%04d.png\", 1, 20)\n\n### Parameters:\n\n-   string **pattern**\n\n-   int **begin**\n\n-   int **length**\n\n-   [_optional bool **isReversed**_]\n\n\n### Returns\n\n-   \n\n-   table",
          "name": "display.newFrames",
          "type": 0,
          "params": "pattern, begin, length, isReversed"
        },
        {
          "description": "create animation",
          "tags": [
            {
              "name": "example",
              "value": ""
            },
            {
              "name": "example",
              "value": ""
            }
          ],
          "doc": "create animation\n\n### Example\n\n    display.newAnimation(frames, time)\n\n### Example\n\n    local frames    = display.newFrames(\"walk_%02d.png\", 1, 20)\n    local animation = display.newAnimation(frames, 0.5 / 20) -- 0.5s play 20 frames",
          "name": "display.newAnimation",
          "type": 0,
          "params": "frames, time"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/functions.lua",
    "filename": "functions",
    "moduleName": "functions",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "Convert to number.",
          "tags": [
            {
              "name": "param",
              "value": "mixed v"
            },
            {
              "name": "return",
              "value": "number"
            }
          ],
          "doc": "Convert to number.\n\n\n### Parameters\n\n-   mixed **v**\n\n### Returns\n\n-   number",
          "name": "tonumber",
          "type": 0,
          "params": "v, base"
        },
        {
          "description": "Convert to integer.",
          "tags": [
            {
              "name": "param",
              "value": "mixed v"
            },
            {
              "name": "return",
              "value": "number"
            }
          ],
          "doc": "Convert to integer.\n\n\n### Parameters\n\n-   mixed **v**\n\n### Returns\n\n-   number",
          "name": "toint",
          "type": 0,
          "params": "v"
        },
        {
          "description": "Convert to boolean.",
          "tags": [
            {
              "name": "param",
              "value": "mixed v"
            },
            {
              "name": "return",
              "value": "boolean"
            }
          ],
          "doc": "Convert to boolean.\n\n\n### Parameters\n\n-   mixed **v**\n\n### Returns\n\n-   boolean",
          "name": "tobool",
          "type": 0,
          "params": "v"
        },
        {
          "description": "Convert to table.",
          "tags": [
            {
              "name": "param",
              "value": "mixed v"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Convert to table.\n\n\n### Parameters\n\n-   mixed **v**\n\n### Returns\n\n-   table",
          "name": "totable",
          "type": 0,
          "params": "v"
        },
        {
          "description": "Creating a copy of an table with fully replicated properties.",
          "tags": [
            {
              "name": "param",
              "value": "mixed object"
            },
            {
              "name": "return",
              "value": "mixed"
            }
          ],
          "doc": "Creating a copy of an table with fully replicated properties.\n\n**Usage:**\n\n    -- Creating a reference of an table:\n    local t1 = {a = 1, b = 2}\n    local t2 = t1\n    t2.b = 3    -- t1 = {a = 1, b = 3} <-- t1.b changed\n\n    -- Createing a copy of an table:\n    local t1 = {a = 1, b = 2}\n    local t2 = clone(t1)\n    t2.b = 3    -- t1 = {a = 1, b = 2} <-- t1.b no change\n\n\n\n### Parameters\n\n-   mixed **object**\n\n### Returns\n\n-   mixed",
          "name": "clone",
          "type": 0,
          "params": "object"
        },
        {
          "description": "Create an class.",
          "tags": [
            {
              "name": "param",
              "value": "string classname"
            },
            {
              "name": "param",
              "value": "table"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Create an class.\n\n**Usage:**\n\n    local Shape = class(\"Shape\")\n\n    -- base class\n    function Shape:ctor(shapeName)\n        self.shapeName = shapeName\n        printf(\"Shape:ctor(%s)\", self.shapeName)\n    end\n\n    function Shape:draw()\n        printf(\"draw %s\", self.shapeName)\n    end\n\n    --\n\n    local Circle = class(\"Circle\", Shape)\n\n    function Circle:ctor()\n        Circle.super.ctor(self, \"circle\")   -- call super-class method\n        self.radius = 100\n    end\n\n    function Circle:setRadius(radius)\n        self.radius = radius\n    end\n\n    function Circle:draw()                  -- overrideing super-class method\n        printf(\"draw %s, raidus = %0.2f\", self.shapeName, self.raidus)\n    end\n\n    --\n\n    local Rectangle = class(\"Rectangle\", Shape)\n\n    function Rectangle:ctor()\n        Rectangle.super.ctor(self, \"rectangle\")\n    end\n\n    --\n\n    local circle = Circle.new()             -- output: Shape:ctor(circle)\n    circle:setRaidus(200)\n    circle:draw()                           -- output: draw circle, radius = 200.00\n\n    local rectangle = Rectangle.new()       -- output: Shape:ctor(rectangle)\n    rectangle:draw()                        -- output: draw rectangle\n\n\n\n### Parameters\n\n-   string **classname**\n-   table\n\n### Returns\n\n-   table",
          "name": "class",
          "type": 0,
          "params": "classname, super"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "import",
          "type": 0,
          "params": "moduleName, currentModuleName"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "handler",
          "type": 0,
          "params": "target, method"
        },
        {
          "description": "Returns a associative table containing the matching values.",
          "tags": [
            {
              "name": "param",
              "value": "table arr"
            },
            {
              "name": "param",
              "value": "table names"
            },
            {
              "name": "return",
              "value": "array"
            }
          ],
          "doc": "Returns a associative table containing the matching values.\n\n\n### Parameters\n\n-   table **arr**\n-   table **names**\n\n### Returns\n\n-   array",
          "name": "export",
          "type": 0,
          "params": "arr, names"
        },
        {
          "description": "Rounds a float.",
          "tags": [
            {
              "name": "param",
              "value": "number num"
            },
            {
              "name": "return",
              "value": "number"
            }
          ],
          "doc": "Rounds a float.\n\n\n### Parameters\n\n-   number **num**\n\n### Returns\n\n-   number",
          "name": "math.round",
          "type": 0,
          "params": "num"
        },
        {
          "description": "Checks whether a file exists.",
          "tags": [
            {
              "name": "param",
              "value": "string path"
            },
            {
              "name": "return",
              "value": "boolean"
            }
          ],
          "doc": "Checks whether a file exists.\n\n\n### Parameters\n\n-   string **path**\n\n### Returns\n\n-   boolean",
          "name": "io.exists",
          "type": 0,
          "params": "path"
        },
        {
          "description": "Reads entire file into a string, or return FALSE on failure.",
          "tags": [
            {
              "name": "param",
              "value": "string path"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Reads entire file into a string, or return FALSE on failure.\n\n\n### Parameters\n\n-   string **path**\n\n### Returns\n\n-   string",
          "name": "io.readfile",
          "type": 0,
          "params": "path"
        },
        {
          "description": "Write a string to a file, or return FALSE on failure.",
          "tags": [
            {
              "name": "param",
              "value": "string path"
            },
            {
              "name": "param",
              "value": "string content"
            },
            {
              "name": "param",
              "value": "string mode"
            },
            {
              "name": "return",
              "value": "boolean"
            }
          ],
          "doc": "Write a string to a file, or return FALSE on failure.\n\n\n### Parameters\n\n-   string **path**\n-   string **content**\n-   string **mode**\n\n### Returns\n\n-   boolean\n\n### Note:\nThe mode string can be any of the following:\n    \"r\": read mode\n    \"w\": write mode;\n    \"a\": append mode;\n    \"r+\": update mode, all previous data is preserved;\n    \"w+\": update mode, all previous data is erased; (the default);\n    \"a+\": append update mode, previous data is preserved, writing is only allowed at the end of file.",
          "name": "io.writefile",
          "type": 0,
          "params": "path, content, mode"
        },
        {
          "description": "Returns information about a file path.",
          "tags": [
            {
              "name": "param",
              "value": "string path"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Returns information about a file path.\n\n**Usage:**\n\n    local path = \"/var/app/test/abc.png\"\n    local pathinfo  = io.pathinfo(path)\n    -- pathinfo.dirname  = \"/var/app/test/\"\n    -- pathinfo.filename = \"abc.png\"\n    -- pathinfo.basename = \"abc\"\n    -- pathinfo.extname  = \".png\"\n\n\n\n### Parameters\n\n-   string **path**\n\n### Returns\n\n-   table",
          "name": "io.pathinfo",
          "type": 0,
          "params": "path"
        },
        {
          "description": "Gets file size, or return FALSE on failure.",
          "tags": [
            {
              "name": "param",
              "value": "string path"
            },
            {
              "name": "return",
              "value": "number"
            }
          ],
          "doc": "Gets file size, or return FALSE on failure.\n\n\n### Parameters\n\n-   string **path**\n\n### Returns\n\n-   number",
          "name": "io.filesize",
          "type": 0,
          "params": "path"
        },
        {
          "description": "Count all elements in an table.",
          "tags": [
            {
              "name": "param",
              "value": "table t"
            },
            {
              "name": "return",
              "value": "number"
            }
          ],
          "doc": "Count all elements in an table.\n\n\n### Parameters\n\n-   table **t**\n\n### Returns\n\n-   number",
          "name": "table.nums",
          "type": 0,
          "params": "t"
        },
        {
          "description": "Return all the keys or a subset of the keys of an table.",
          "tags": [
            {
              "name": "param",
              "value": "table t"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Return all the keys or a subset of the keys of an table.\n\n**Usage:**\n\n    local t = {a = 1, b = 2, c = 3}\n    local keys = table.keys(t)\n    -- keys = {\"a\", \"b\", \"c\"}\n\n\n\n### Parameters\n\n-   table **t**\n\n### Returns\n\n-   table",
          "name": "table.keys",
          "type": 0,
          "params": "t"
        },
        {
          "description": "Return all the values of an table.",
          "tags": [
            {
              "name": "param",
              "value": "table t"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Return all the values of an table.\n\n**Usage:**\n\n    local t = {a = \"1\", b = \"2\", c = \"3\"}\n    local values = table.values(t)\n    -- values = {1, 2, 3}\n\n\n\n### Parameters\n\n-   table **t**\n\n### Returns\n\n-   table",
          "name": "table.values",
          "type": 0,
          "params": "t"
        },
        {
          "description": "Merge tables.",
          "tags": [
            {
              "name": "param",
              "value": "table dest"
            },
            {
              "name": "param",
              "value": "table src"
            }
          ],
          "doc": "Merge tables.\n\n**Usage:**\n\n    local dest = {a = 1, b = 2}\n    local src  = {c = 3, d = 4}\n    table.merge(dest, src)\n    -- dest = {a = 1, b = 2, c = 3, d = 4}\n\n\n\n### Parameters\n\n-   table **dest**\n-   table **src**",
          "name": "table.merge",
          "type": 0,
          "params": "dest, src"
        },
        {
          "description": "Convert special characters to HTML entities.",
          "tags": [
            {
              "name": "param",
              "value": "string input"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Convert special characters to HTML entities.\n\nThe translations performed are:\n\n-   '&' (ampersand) becomes '&amp;'\n-   '\"' (double quote) becomes '&quot;'\n-   \"'\" (single quote) becomes '&#039;'\n-   '<' (less than) becomes '&lt;'\n-   '>' (greater than) becomes '&gt;'\n\n\n### Parameters\n\n-   string **input**\n\n### Returns\n\n-   string",
          "name": "string.htmlspecialchars",
          "type": 0,
          "params": "input"
        },
        {
          "description": "Inserts HTML line breaks before all newlines in a string.",
          "tags": [
            {
              "name": "param",
              "value": "string input"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Inserts HTML line breaks before all newlines in a string.\n\nReturns string with '<br />' inserted before all newlines (\\n).\n\n\n### Parameters\n\n-   string **input**\n\n### Returns\n\n-   string",
          "name": "string.nl2br",
          "type": 0,
          "params": "input"
        },
        {
          "description": "Returns a HTML entities formatted version of string.",
          "tags": [
            {
              "name": "param",
              "value": "string input"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Returns a HTML entities formatted version of string.\n\n\n### Parameters\n\n-   string **input**\n\n### Returns\n\n-   string",
          "name": "string.text2html",
          "type": 0,
          "params": "input"
        },
        {
          "description": "Split a string by string.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "param",
              "value": "string delimiter"
            },
            {
              "name": "return",
              "value": "table"
            }
          ],
          "doc": "Split a string by string.\n\n\n### Parameters\n\n-   string **str**\n-   string **delimiter**\n\n### Returns\n\n-   table",
          "name": "string.split",
          "type": 0,
          "params": "str, delimiter"
        },
        {
          "description": "Strip whitespace (or other characters) from the beginning of a string.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Strip whitespace (or other characters) from the beginning of a string.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.ltrim",
          "type": 0,
          "params": "str"
        },
        {
          "description": "Strip whitespace (or other characters) from the end of a string.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Strip whitespace (or other characters) from the end of a string.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.rtrim",
          "type": 0,
          "params": "str"
        },
        {
          "description": "Strip whitespace (or other characters) from the beginning and end of a string.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Strip whitespace (or other characters) from the beginning and end of a string.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.trim",
          "type": 0,
          "params": "str"
        },
        {
          "description": "Make a string's first character uppercase.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Make a string's first character uppercase.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.ucfirst",
          "type": 0,
          "params": "str"
        },
        {
          "description": "### Parameters",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.urlencodeChar",
          "type": 0,
          "params": "char"
        },
        {
          "description": "URL-encodes string.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "URL-encodes string.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   string",
          "name": "string.urlencode",
          "type": 0,
          "params": "str"
        },
        {
          "description": "Get UTF8 string length.",
          "tags": [
            {
              "name": "param",
              "value": "string str"
            },
            {
              "name": "return",
              "value": "int"
            }
          ],
          "doc": "Get UTF8 string length.\n\n\n### Parameters\n\n-   string **str**\n\n### Returns\n\n-   int",
          "name": "string.utf8len",
          "type": 0,
          "params": "str"
        },
        {
          "description": "Return formatted string with a comma (\",\") between every group of thousands.",
          "tags": [
            {
              "name": "param",
              "value": "number num"
            },
            {
              "name": "return",
              "value": "string"
            }
          ],
          "doc": "Return formatted string with a comma (\",\") between every group of thousands.\n\n**Usage:**\n\n    local value = math.comma(\"232423.234\") -- value = \"232,423.234\"\n\n\n\n### Parameters\n\n-   number **num**\n\n### Returns\n\n-   string",
          "name": "string.formatNumberThousands",
          "type": 0,
          "params": "num"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/init.lua",
    "filename": "init",
    "moduleName": "init",
    "tags": {
      "moduleDocs": [
        "Bootstrap for client.\n\n**Auto registered global module**\n\nModule | Descripton\n------ | ----------\n@see framework.device | Query information about the system\n@see framework.transition | Actions, Transformations and Effects\n@see framework.display | Create scene, layer, sprite\n@see framework.audio | Play music, sound effect\n@see framework.ui | Create menu, label, widgets\n@see framework.network | ...\n@see framework.luaoc | Call Objective-C from Lua, iOS platform only\n@see framework.luaj | Call Java from Lua, Android platform only\n@see framework.crypto | Crypto\n\n<br />\n\n**More client modules**\n\nModule | Descripton\n------ | ----------\n[framework.scheduler](framework.scheduler.html) | Scheduler"
      ],
      "moduleTags": [
        {
          "name": "see",
          "value": "framework.device"
        },
        {
          "name": "see",
          "value": "framework.transition"
        },
        {
          "name": "see",
          "value": "framework.display"
        },
        {
          "name": "see",
          "value": "framework.audio"
        },
        {
          "name": "see",
          "value": "framework.ui"
        },
        {
          "name": "see",
          "value": "framework.network"
        },
        {
          "name": "see",
          "value": "framework.luaoc"
        },
        {
          "name": "see",
          "value": "framework.luaj"
        },
        {
          "name": "see",
          "value": "framework.crypto"
        }
      ],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/json.lua",
    "filename": "json",
    "moduleName": "json",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/luaj.lua",
    "filename": "luaj",
    "moduleName": "luaj",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "Call Java form Lua, and call Lua from Java.",
          "tags": [],
          "doc": "Call Java form Lua, and call Lua from Java.\n\n-   Call Java Class Static Method from Lua\n-   Pass Lua function to Java\n-   Call Lua function from Java\n\n<br />\n\n**References:**\n\n-   [LuaJavaBridge - Call Java from Lua (Chinese only)](http://dualface.github.com/blog/2013/01/01/call-java-from-lua/)",
          "name": "checkArguments",
          "type": 0,
          "params": "args, sig"
        },
        {
          "description": "Call Java Class Static Method",
          "tags": [],
          "doc": "Call Java Class Static Method\n\n### Example:\n\n    local className = \"com/flurry/android/FlurryAgent\"\n    local args = {\"APP_START\"}\n    local sig  = \"(Ljava/lang/String;)V\"\n    local ok = luaj.callStaticMethod(className, \"logEvent\", args, sig)\n    if ok then\n        -- call success\n    else\n        -- call failure\n    end\n\n### Parameters:\n\n-   string **className** Java class name\n-   string **methodName** Method name\n-   [_optional table **args**_] Arguments pass to Java\n-   [_optional string **sig**_] Java Method Signature\n\n\n> Java Method Signature reference: [JNI Types and Data Structures](http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html#wp16432)\n\n### Returns:\n\n-   boolean call success or failure\n-   mixed Java method returned value",
          "name": "luaj.callStaticMethod",
          "type": 0,
          "params": "className, methodName, args, sig"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/luaoc.lua",
    "filename": "luaoc",
    "moduleName": "luaoc",
    "tags": {
      "moduleDocs": [
        "Call Objective-C form Lua, and call Lua from Objective-C.\n\n-   Call Objective-C Class Static Method from Lua\n-   Pass aruments to Objective-C\n-   Pass Lua function to Objective-C\n-   Call Lua function from Objective-C\n\n## HOW TO USE:\n\n~~~\n\nlocal function onLogin(result)\n    if result == \"ok\" then\n        print(\"login ok\")\n    else\n        print(\"login failure, error message = \", result)\n    end\nend\n\nlocal args = {\n    username  = \"dualface\",\n    password  = \"123456\",\n    autologin = true,\n    callback  = onLogin\n}\nlocal ok, ret = luaoc.callStaticMethod(\"MySDK\", \"login\", args)\nif ok then\n    -- call success\n    print(\"ret = \", ret)\nelse\n    -- call failure\n    print(\"error code = \", ret)\nend\n~~~\n\n### Objective-C method:\n\n~~~ .objectivec\n#include \"CCLuaObjcBridge.h\"\n\n+ (NSString *)login:(NSDictionary *)dict\n{\n    NSString *username = [dict objectForKey:@\"username\"];\n    NSString *password = [dict objectForKey:@\"password\"];\n    BOOL autologin = [[dict objectForKey:@\"autologin\"] boolValue];\n    int callback = [[dict objectForKey:@\"callback\"] intValue];\n\n    if (.....)\n    {\n        CCLuaObjcBridge::callLuaFunctionById(callback, \"ok\");\n    }\n    else\n    {\n        CCLuaObjcBridge::callLuaFunctionById(callback, \"error message\");\n    }\n    CCLuaObjcBridge::releaseLuaFunctionById(callback);\n\n    return @\"something\";\n}\n~~~"
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "Call Objective-C Class Method",
          "tags": [],
          "doc": "Call Objective-C Class Method\n\n### Parameters:\n\n-   string **className** Objective-C class name\n-   string **methodName** Method name\n-   [_optional table **args**_] Arguments pass to Objective-C\n\n### Returns:\n\n-   boolean call success or failure\n-   mixed Objective-C method returned value",
          "name": "luaoc.callStaticMethod",
          "type": 0,
          "params": "className, methodName, args"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/network.lua",
    "filename": "network",
    "moduleName": "network",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": [
        {
          "description": "~~~ lua",
          "tags": [],
          "doc": "~~~ lua\n\n#define kCCHTTPRequestMethodGET  0\n#define kCCHTTPRequestMethodPOST 1\n\n#define kCCHTTPRequestAcceptEncodingIdentity 0\n#define kCCHTTPRequestAcceptEncodingGzip     1\n#define kCCHTTPRequestAcceptEncodingDeflate  2\n\n#define kCCHTTPRequestStateIdle         0\n#define kCCHTTPRequestStateCleared      1\n#define kCCHTTPRequestStateInProgress   2\n#define kCCHTTPRequestStateCompleted    3\n#define kCCHTTPRequestStateCancelled    4\n#define kCCHTTPRequestStateFailed       5\n\n\nfunction callback(event)\n    local ok = (event.name == \"completed\")\n    local request = event.request\n\n    if not ok then\n        -- request failure\n        print(request:getErrorCode(), request:getErrorMessage())\n        return\n    end\n\n    local code = request:getResponseStatusCode()\n    if code ~= 200 then\n        -- code is HTTP response code\n        print(code)\n        return\n    end\n\n    local response = request:getResponseString()\n    print(response)\nend\n\nlocal request = network.createHTTPRequest(callback, url, \"POST\")\nrequest:addPOSTValue(\"KEY\", \"VALUE\")\nrequest:start()\n\n~~~",
          "name": "network.createHTTPRequest",
          "type": 0,
          "params": "callback, url, method"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/scheduler.lua",
    "filename": "scheduler",
    "moduleName": "scheduler",
    "tags": {
      "moduleDocs": [],
      "moduleTags": [],
      "functions": []
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/transition.lua",
    "filename": "transition",
    "moduleName": "transition",
    "tags": {
      "moduleDocs": [
        "Actions, Transformations and Effects"
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "Execute an action with a target.",
          "tags": [],
          "doc": "Execute an action with a target.\n\n### Example:\n\n    -- moving right target 100 points, durations of 2.0 seconds.\n    local action = CCMoveBy:create(ccp(100, 0), 0.2)\n\n    local args = {\n        delay = 3.0,                        -- before moving, delay 3.0 seconds\n        easing = \"CCEaseBackInOut\",         -- use CCEaseBackInOut for easing\n        onComplete = function()             -- call function after moving completed\n            echo(\"MOVING COMPLETED\")\n        end,\n    }\n    transition.execute(sprite, action, args)\n\nNote: **Other transiton methods can also use the same args parameters.**\n\n### Parameters:\n\n-   CCNode **target**\n\n-   CCAction **action**\n\n-   [_optional table **args**_]",
          "name": "transition.execute",
          "type": 0,
          "params": "target, action, args"
        },
        {
          "description": "Rotate a sprite to the rotation.",
          "tags": [],
          "doc": "Rotate a sprite to the rotation.\n\n### Example:\n\n    -- rotate sprite to 200\n    transition.rotateTo(sprite, {time = 2.0, rotate = 200})\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.rotateTo",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Moves a sprite to the position x,y. x and y are absolute coordinates by modifying it's position attribute.",
          "tags": [],
          "doc": "Moves a sprite to the position x,y. x and y are absolute coordinates by modifying it's position attribute.\n\n### Example:\n\n    -- Moving sprite to 100, 100\n    transition.moveTo(sprite, {time = 2.0, x = 100, y = 100})\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.moveTo",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Moves a sprite x,y points by modifying it's position attribute. x and y are relative to the position of the object.",
          "tags": [],
          "doc": "Moves a sprite x,y points by modifying it's position attribute. x and y are relative to the position of the object.\n\n### Example:\n\n    -- Moving right and up\n    transition.moveBy(sprite, {time = 2.0, x = 100, y = 100})\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.moveBy",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Fades In an sprite. It modifies the opacity from 0 to 255. The \"reverse\" of this action is transition.fadeOut() .",
          "tags": [],
          "doc": "Fades In an sprite. It modifies the opacity from 0 to 255. The \"reverse\" of this action is transition.fadeOut() .\n\n### Example:\n\n    transition.fadeIn(sprite, {time = 1.0})\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.fadeIn",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Fades Out an sprite. It modifies the opacity from 255 to 0. The \"reverse\" of this action is transition.fadeIn() .",
          "tags": [],
          "doc": "Fades Out an sprite. It modifies the opacity from 255 to 0. The \"reverse\" of this action is transition.fadeIn() .\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.fadeOut",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Fades an sprite. It modifies the opacity from the current value to a custom one.",
          "tags": [],
          "doc": "Fades an sprite. It modifies the opacity from the current value to a custom one.\n\n### Example:\n\n    transition.fadeTo(sprite, {time = 2.0, opacity = 200})\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.fadeTo",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Scales a sprite to a zoom factor by modifying it's scale attribute.",
          "tags": [],
          "doc": "Scales a sprite to a zoom factor by modifying it's scale attribute.\n\n### Example:\n\n    transition.scaleTo(sprite1, {time = 2.0, scale = 2.0})      -- zoom sprite\n    transition.scaleTo(sprite2, {time = 2.0, scaleX = 2.0})     -- zoom horizontal\n    transition.scaleTo(sprite3, {time = 2.0, scaleY = 2.0})     -- zoom vertical\n\n### Parameters:\n\n-   CCNode **target**\n\n-   table **args**",
          "name": "transition.scaleTo",
          "type": 0,
          "params": "target, args"
        },
        {
          "description": "Create an array of sequenceable actions given an table.",
          "tags": [],
          "doc": "Create an array of sequenceable actions given an table.\n\n### Example:\n\n    local function onComplete()\n        echo(\"SEQUENCE COMPLETED\")\n    end\n\n    local action = transition.sequence({\n        CCMoveBy:create(sprite, ccp(100, 0)),   -- moving right\n        CCDelayTime:create(1.0),                -- delay 1 seconds\n        CCMoveBy:create(sprite, ccp(0, 100)),   -- moving up\n        CCCallFunc:create(onComplete),          -- call function\n    })\n\n    sprite:runAction(action)\n\n### Parameters:\n\n-   table **actions**",
          "name": "transition.sequence",
          "type": 0,
          "params": "actions"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "transition.playAnimationOnce",
          "type": 0,
          "params": "target, animation, removeWhenFinished, onComplete, delay"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "transition.playAnimationForever",
          "type": 0,
          "params": "target, animation, delay"
        },
        {
          "description": "Stop the action.",
          "tags": [],
          "doc": "Stop the action.\n\n### Example:\n\n    local action = transition.moveTo(sprite, {time = 2.0, x = 100, y = 100})\n    ....\n    transition.removeAction(action) -- stop moving\n\n### Parameters:\n\n-   CCAction **action**",
          "name": "transition.removeAction",
          "type": 0,
          "params": "action"
        },
        {
          "description": "Stop all actions for the target.",
          "tags": [],
          "doc": "Stop all actions for the target.\n\n### Example:\n\n    transition.moveTo(sprite, {time = 2.0, x = 100, y = 100})\n    transition.fadeOut(sprite, {time = 2.0})\n    ....\n    transition.stopTarget(sprite) -- stop moving, stop fades\n\n\n### Parameters:\n\n-   CCNode **target**",
          "name": "transition.stopTarget",
          "type": 0,
          "params": "target"
        },
        {
          "description": "Pauses the target, all running actions and newly added actions will be paused.",
          "tags": [],
          "doc": "Pauses the target, all running actions and newly added actions will be paused.\n\n### Parameters:\n\n-   CCNode **target**",
          "name": "transition.pauseTarget",
          "type": 0,
          "params": "target"
        },
        {
          "description": "Resumes the target.",
          "tags": [],
          "doc": "Resumes the target.\n\n### Parameters:\n\n-   CCNode **target**",
          "name": "transition.resumeTarget",
          "type": 0,
          "params": "target"
        }
      ]
    }
  },
  {
    "path": "/Users/dualface/Documents/Games/quick-cocos2d-x/framework/ui.lua",
    "filename": "ui",
    "moduleName": "ui",
    "tags": {
      "moduleDocs": [
        "Create menu, label, widgets"
      ],
      "moduleTags": [],
      "functions": [
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newEditBox",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newMenu",
          "type": 0,
          "params": "items"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newImageMenuItem",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newTTFLabelMenuItem",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newBMFontLabel",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newTTFLabel",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newTTFLabelWithShadow",
          "type": 0,
          "params": "params"
        },
        {
          "description": "",
          "tags": [],
          "doc": "",
          "name": "ui.newTTFLabelWithOutline",
          "type": 0,
          "params": "params"
        }
      ]
    }
  }
]
